#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23
#  in conjunction with Tcl version 8.6
#    May 29, 2019 07:38:39 PM CST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = main (root)
    main_support.init(root, top)
    root.mainloop()

w = None
def create_main(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = main (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_main():
    global w
    w.destroy()
    w = None

class main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1080x640")
        top.title("iFAA")
        top.configure(background="#f0f0f0")

        self.mainCanvas = tk.Canvas(top)
        self.mainCanvas.place(relx=0.009, rely=0.016, relheight=0.705
                , relwidth=0.621)
        self.mainCanvas.configure(background="#ffffff")
        self.mainCanvas.configure(borderwidth="2")
        self.mainCanvas.configure(relief="ridge")
        self.mainCanvas.configure(selectbackground="#c4c4c4")
        self.mainCanvas.configure(width=680)

        self.chosenList = tk.Listbox(top)
        self.chosenList.place(relx=0.639, rely=0.016, relheight=0.978
                , relwidth=0.152)
        self.chosenList.configure(background="white")
        self.chosenList.configure(font="TkFixedFont")
        self.chosenList.configure(width=164)

        self.allList = tk.Listbox(top)
        self.allList.place(relx=0.833, rely=0.016, relheight=0.978
                , relwidth=0.152)
        self.allList.configure(background="white")
        self.allList.configure(font="TkFixedFont")
        self.allList.configure(selectbackground="#c4c4c4")
        self.allList.configure(width=164)

        self.left = tk.Button(top)
        self.left.place(relx=0.792, rely=0.469, height=31, width=41)
        self.left.configure(text='''<<''')
        self.left.configure(width=41)

        self.right = tk.Button(top)
        self.right.place(relx=0.792, rely=0.523, height=31, width=41)
        self.right.configure(activebackground="#f9f9f9")
        self.right.configure(text='''>>''')

        self.original = tk.Button(top)
        self.original.place(relx=0.009, rely=0.734, height=31, width=191)
        self.original.configure(cursor="fleur")
        self.original.configure(text='''Original Data''')
        self.original.configure(width=191)

        self.movingavg = tk.Button(top)
        self.movingavg.place(relx=0.231, rely=0.734, height=31, width=191)
        self.movingavg.configure(activebackground="#f9f9f9")
        self.movingavg.configure(text='''Moving Average''')

        self.curve_similarity = tk.Button(top)
        self.curve_similarity.place(relx=0.454, rely=0.734, height=31, width=191)

        self.curve_similarity.configure(activebackground="#f9f9f9")
        self.curve_similarity.configure(text='''Curve Similarity''')

        self.lsh_sim = tk.Button(top)
        self.lsh_sim.place(relx=0.009, rely=0.828, height=31, width=191)
        self.lsh_sim.configure(activebackground="#f9f9f9")
        self.lsh_sim.configure(text='''LSH Similarity''')

        self.bloom = tk.Button(top)
        self.bloom.place(relx=0.231, rely=0.828, height=31, width=135)
        self.bloom.configure(activebackground="#f9f9f9")
        self.bloom.configure(text='''Bloom Filter''')

        self.dgim = tk.Button(top)
        self.dgim.place(relx=0.366, rely=0.828, height=31, width=135)
        self.dgim.configure(activebackground="#f9f9f9")
        self.dgim.configure(cursor="fleur")
        self.dgim.configure(text='''DGIM Estimate''')

        self.fm = tk.Button(top)
        self.fm.place(relx=0.505, rely=0.828, height=31, width=135)
        self.fm.configure(activebackground="#f9f9f9")
        self.fm.configure(text='''FM Method''')

        self.son = tk.Button(top)
        self.son.place(relx=0.009, rely=0.922, height=31, width=191)
        self.son.configure(activebackground="#f9f9f9")
        self.son.configure(text='''SON Association''')

        self.dscluster = tk.Button(top)
        self.dscluster.place(relx=0.231, rely=0.922, height=31, width=191)
        self.dscluster.configure(activebackground="#f9f9f9")
        self.dscluster.configure(text='''DS Clustering''')

        self.settings = tk.Button(top)
        self.settings.place(relx=0.454, rely=0.922, height=31, width=191)
        self.settings.configure(activebackground="#f9f9f9")
        self.settings.configure(text='''Settings''')

if __name__ == '__main__':
    vp_start_gui()





